{"version":3,"sources":["component/LayoutHeader/index.tsx","component/costEstimater/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["layout","className","costEstimater","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAQe,SAASA,IACtB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,iBAAgB,gDAC/B,yBAAKA,UAAU,eAEnB,yBAAKA,UAAU,aACX,6BACI,4BAAQA,UAAU,UAAlB,mBACA,4BAAQA,UAAU,UAAlB,2BACA,4BAAQA,UAAU,UAAlB,iCACA,4BAAQA,UAAU,UAAlB,wBACA,4BAAQA,UAAU,UAAlB,sB,MCnBH,SAASC,IACpB,OACI,yBAAKD,UAAU,qBACX,kDCEZ,IAqBeE,EArBH,WACV,OACE,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,cACb,oCAEF,0BAAMA,UAAU,wBACd,6BAASA,UAAU,kBACf,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,2BAAOA,UAAU,eACf,iDCPUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7374a9e8.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css'\n\nvar buttonId:Number;\n\nfunction setButtonID(){\n\n}\nexport default function layout() {\n  return (\n      <div className=\"chosenlayout\">\n          <div className=\"chosenlayoutHeader\">\n              <div className=\"chosenHeading\"><h1>1.choosen Image</h1></div>\n              <div className=\"selectBar\"></div>\n          </div>\n          <div className=\"buttonNav\">\n              <nav>\n                  <button className=\"button\" >1.choosen Image</button>\n                  <button className=\"button\">2.choosen Instance Type</button>\n                  <button className=\"button\">3.choosen Storage and Network</button>\n                  <button className=\"button\">4.configure Security</button>\n                  <button className=\"button\">5.Review Launch</button>\n              </nav>\n          </div>\n      </div>\n  );\n}\n","import React from 'react';\nimport './index.css'\nexport default function costEstimater() {\n    return (\n        <div className=\"costEstimaterCard\">\n            <header>costEstimater</header>\n        </div>\n    );\n}","import React from 'react';\n\nimport './App.css';\n\nimport LayoutHeader from \"./component/LayoutHeader\";\nimport CardsDisplay from \"./component/costEstimater\";\nimport costEstimater from \"./component/CardsDisplay\";\nconst App = () => {\n  return (\n    <div className=\"App-container\">\n      <div className=\"vmc-header\">\n        <h1>HVC</h1>\n      </div>\n      <main className=\"vmc-layout-container\">\n        <article className=\"article-layout\">\n            <LayoutHeader></LayoutHeader>\n            <CardsDisplay></CardsDisplay>\n        </article>\n        <aside className=\"asideLayout\">\n          <h1>costEstimater</h1>\n            {/* <costEstimater></costEstimater> */}\n        </aside>\n        \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}